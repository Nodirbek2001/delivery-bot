import logging
import asyncio
import aiosqlite
import requests
import csv
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import InputFile
from aiogram.types import WebAppInfo  # ‚Üê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ò–ú–ü–û–†–¢ –î–õ–Ø MINI APP


API_TOKEN = os.getenv('API_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))
WEBAPP_URL = os.getenv('WEBAPP_URL')  # ‚Üê –í–ê–® FRAMER –°–ê–ô–¢ (HTTPS)


bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
waiting_for_location = {}


# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
async def init_db():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with aiosqlite.connect("users.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                phone TEXT,
                latitude REAL,
                longitude REAL,
                registered INTEGER DEFAULT 0
            )
        """)
        await db.commit()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")


async def save_user(user_id, phone=None, latitude=None, longitude=None, registered=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É"""
    async with aiosqlite.connect("users.db") as db:
        await db.execute("""
            INSERT OR REPLACE INTO users (user_id, phone, latitude, longitude, registered)
            VALUES (?, 
                    COALESCE(?, (SELECT phone FROM users WHERE user_id = ?)), 
                    COALESCE(?, (SELECT latitude FROM users WHERE user_id = ?)), 
                    COALESCE(?, (SELECT longitude FROM users WHERE user_id = ?)), 
                    COALESCE(?, (SELECT registered FROM users WHERE user_id = ?)))
        """, (user_id, phone, user_id, latitude, user_id, longitude, user_id, registered, user_id))
        await db.commit()


async def is_registered(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    async with aiosqlite.connect("users.db") as db:
        cursor = await db.execute("SELECT registered FROM users WHERE user_id = ? AND registered = 1", (user_id,))
        return bool(await cursor.fetchone())


async def get_all_users():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with aiosqlite.connect("users.db") as db:
        cursor = await db.execute("SELECT user_id FROM users WHERE registered = 1")
        return [row[0] for row in await cursor.fetchall()]


# === –°–û–ó–î–ê–ù–ò–ï –ö–ù–û–ü–ö–ò MINI APP ===
def create_shop_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç inline –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App –º–∞–≥–∞–∑–∏–Ω–∞"""
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            text="üõí –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", 
            web_app=WebAppInfo(url=WEBAPP_URL)  # ‚Üê –û–¢–ö–†–´–í–ê–ï–¢ MINI APP –í–ù–£–¢–†–ò TELEGRAM
        )
    )
    return keyboard


# === –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• –ò–ó MINI APP ===
@dp.message_handler(content_types=['web_app_data'])
async def handle_webapp_data(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑ Mini App"""
    try:
        data = message.web_app_data.data
        user_id = message.from_user.id
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –∏–∑ –≤–∞—à–µ–≥–æ Framer –º–∞–≥–∞–∑–∏–Ω–∞
        await message.answer(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω!\n\nüìã –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n{data}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        try:
            await bot.send_message(
                ADMIN_ID, 
                f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\nüë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\nüìã –î–∞–Ω–Ω—ã–µ:\n{data}"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞")


# === –§–û–¢–û/–í–ò–î–ï–û –†–ê–°–°–´–õ–ö–ê –ê–î–ú–ò–ù–£ ===
@dp.message_handler(content_types=['photo'])
async def admin_photo_broadcast(message: types.Message):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é /broadcast_photo"""
    if message.from_user.id != ADMIN_ID:
        return
        
    if not message.caption or not message.caption.lower().startswith('/broadcast_photo'):
        return
        
    caption = message.caption[len('/broadcast_photo'):].strip()
    file_id = message.photo[-1].file_id
    users = await get_all_users()
    success = 0
    
    for user_id in users:
        try:
            await bot.send_photo(user_id, file_id, caption=caption)
            success += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
    await message.answer(f"üì∏ –§–æ—Ç–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ {success} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")


@dp.message_handler(content_types=['video'])
async def admin_video_broadcast(message: types.Message):
    """–†–∞—Å—Å—ã–ª–∫–∞ –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é /broadcast_video"""
    if message.from_user.id != ADMIN_ID:
        return
        
    if not message.caption or not message.caption.lower().startswith('/broadcast_video'):
        return
        
    caption = message.caption[len('/broadcast_video'):].strip()
    file_id = message.video.file_id
    users = await get_all_users()
    success = 0
    
    for user_id in users:
        try:
            await bot.send_video(user_id, file_id, caption=caption)
            success += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
    await message.answer(f"üé¨ –í–∏–¥–µ–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ {success} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")


# === –°–¢–ê–†–¢ –ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ===
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    if await is_registered(user_id):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Mini App
        keyboard = create_shop_keyboard()
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üëã", reply_markup=keyboard)
    else:
        # –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
            resize_keyboard=True
        )
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! üéâ\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –º–∞–≥–∞–∑–∏–Ω–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", 
            reply_markup=keyboard
        )


@dp.message_handler(content_types=["contact"])
async def get_phone(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user_id = message.from_user.id
    phone = message.contact.phone_number
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ –±–∞–∑—É
    await save_user(user_id, phone=phone)
    
    # –ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
        resize_keyboard=True
    )
    await message.answer(
        "‚úÖ –ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç!\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", 
        reply_markup=keyboard
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    waiting_for_location[user_id] = True
    asyncio.create_task(location_timeout(message, user_id))


@dp.message_handler(content_types=["location"])
async def get_location(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    lat = message.location.latitude
    lon = message.location.longitude
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await save_user(user_id, latitude=lat, longitude=lon, registered=1)
    waiting_for_location.pop(user_id, None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Mini App
    keyboard = create_shop_keyboard()
    
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=ReplyKeyboardRemove())
    await message.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–∫–∞–∑–∞:", reply_markup=keyboard)


async def location_timeout(message: types.Message, user_id: int):
    """–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (15 —Å–µ–∫—É–Ω–¥)"""
    await asyncio.sleep(15)
    if waiting_for_location.get(user_id):
        await message.answer(
            "‚ö†Ô∏è –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞.\n\n"
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –í–∫–ª—é—á–∏—Ç—å GPS –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ\n"
            "‚Ä¢ –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Telegram\n"
            "‚Ä¢ –ù–∞–∂–∞—Ç—å /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏"
        )
        waiting_for_location.pop(user_id, None)


# === –†–ê–°–°–´–õ–ö–ê –¢–ï–ö–°–¢–ê (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–ê) ===
@dp.message_handler(commands=['broadcast'])
async def text_broadcast(message: types.Message):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if message.from_user.id != ADMIN_ID:
        return
        
    text = message.text.replace("/broadcast", "").strip()
    if not text:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast –í–∞—à —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return
        
    users = await get_all_users()
    success = 0
    failed = 0
    
    for user_id in users:
        try:
            await bot.send_message(user_id, text)
            success += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1
            
    await message.answer(f"üìù –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {failed}")


@dp.message_handler(commands=['users'])
async def users_count(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if message.from_user.id != ADMIN_ID:
        return
        
    count = len(await get_all_users())
    await message.answer(f"üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")


# === –≠–ö–°–ü–û–†–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –í CSV ===
def geocode_coords(lat, lon):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
    if not lat or not lon:
        return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    try:
        url = f"https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat={lat}&lon={lon}&accept-language=ru"
        resp = requests.get(url, timeout=5, headers={"User-Agent": "telegram-bot-exporter/1.0"})
        data = resp.json()
        
        if "display_name" in data:
            return data["display_name"]
        elif "address" in data:
            addr = data["address"]
            parts = [addr.get(k) for k in ("road", "house_number", "city", "town", "village", "state", "country")]
            return ", ".join([str(p) for p in parts if p])
        return f"{lat}, {lon}"
    except Exception:
        return f"{lat}, {lon}"


async def export_csv_ext(message, only_registered: bool):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV"""
    async with aiosqlite.connect("users.db") as db:
        where = "WHERE registered = 1" if only_registered else ""
        cursor = await db.execute(f"SELECT user_id, phone, latitude, longitude, registered FROM users {where}")
        users = await cursor.fetchall()
        
        if not users:
            await message.answer("üìã –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
            
        filename = "users_export.csv"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (–º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ)
        import concurrent.futures
        with concurrent.futures.ThreadPoolExecutor(max_workers=5) as pool:
            geo_texts = list(pool.map(lambda u: geocode_coords(u[2], u[3]), users))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
        with open(filename, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["‚Ññ", "Telegram ID", "–¢–µ–ª–µ—Ñ–æ–Ω", "–°—Ç–∞—Ç—É—Å", "–ê–¥—Ä–µ—Å", "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"])
            
            for idx, (user, geo_text) in enumerate(zip(users, geo_texts), 1):
                user_id, phone, lat, lon, reg = user
                status = "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" if reg else "‚ùå –ù–µ –∑–∞–≤–µ—Ä—à–∏–ª"
                coords = f"{lat or '-'}; {lon or '-'}"
                writer.writerow([idx, user_id, phone or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", status, geo_text, coords])
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
        doc = InputFile(filename)
        caption = "üìä –í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (CSV/Excel)" + (" - —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ" if only_registered else " - –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        await bot.send_document(message.chat.id, doc, caption=caption)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try:
            os.remove(filename)
        except Exception:
            pass


@dp.message_handler(commands=['export_users_ok'])
async def export_registered_users(message: types.Message):
    """–≠–∫—Å–ø–æ—Ä—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if message.from_user.id != ADMIN_ID:
        return
    await export_csv_ext(message, only_registered=True)


@dp.message_handler(commands=['export_users_all'])
async def export_all_users(message: types.Message):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if message.from_user.id != ADMIN_ID:
        return
    await export_csv_ext(message, only_registered=False)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –û–°–¢–ê–õ–¨–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô ===
@dp.message_handler()
async def any_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    
    if await is_registered(user_id):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Mini App –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        keyboard = create_shop_keyboard()
        await message.answer("üõí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω:", reply_markup=keyboard)
    else:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await message.answer("üëã –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")


# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
async def on_startup(dp):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    await init_db()
    print("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print("üì± Mini App –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    print(f"üîó URL –º–∞–≥–∞–∑–∏–Ω–∞: {WEBAPP_URL}")


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, on_startup=on_startup)
